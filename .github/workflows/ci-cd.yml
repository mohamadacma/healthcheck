name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: Release

  jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
        options: >-
          --health-cmd pg_isready
          --health-interval 10s 
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
         ${{ runner.os }}-nuget-   

       - name: Restore dependencies
          run: dotnet restore

       - name: Build application
          run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

       - name: Run unit and integration tests
        run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --collect:"XPlat Code Coverage"
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=testdb;Username=testuser;Password=testpassword"

     - name: Upload test results
         uses: actions/upload-artifact@v3
         if: always()     
         with:
          name: test-results
          path: |
           **/TestResults/**/*.xml
           **/TestResults/**/*.trx

        deploy-demo:
           runs-on: ubuntu-latest
           needs: build-and-test
           if: github.ref == 'refs/heads/main'
           steps:
              - name: Checkout code
              - uses: actions/checkout@v4

              - name: Deploy to Demo
                run: echo "Add deployment steps here (e.g., Azure, AWS..etc)"
       